{"version":3,"sources":["../src/resolve.ts","../src/exec.ts","../src/platforms/darwin.ts","../src/platforms/linux.ts","../src/platforms/win32.ts","../src/index.ts"],"sourcesContent":["import { platform } from 'node:process'\nimport { darwinHWID } from './platforms/darwin.js'\nimport { linuxHWID } from './platforms/linux.js'\nimport { win32HWID } from './platforms/win32.js'\n\nexport type ResolverFn = () => Promise<string>\n\nexport const resolveID: ResolverFn = async () => {\n  switch (platform) {\n    case 'win32':\n      return win32HWID()\n\n    case 'darwin':\n      return darwinHWID()\n\n    case 'linux':\n      return linuxHWID()\n\n    default:\n      throw new Error('unsupported platform')\n  }\n}\n","import { exec as _exec } from 'node:child_process'\nimport { promisify } from 'node:util'\n\nexport const exec = promisify(_exec)\n","import { exec } from '../exec.js'\nimport type { ResolverFn } from '../resolve.js'\n\nexport const darwinHWID: ResolverFn = async () => {\n  const { stdout } = await exec('ioreg -rd1 -c IOPlatformExpertDevice')\n  const uuid = stdout\n    .trim()\n    .split('\\n')\n    .find(line => line.includes('IOPlatformUUID'))\n    ?.replaceAll(/=|\\s+|\"/gi, '')\n    .replaceAll('IOPlatformUUID', '')\n\n  if (!uuid) throw new Error('failed to find hwid')\n  return uuid\n}\n","import { exec } from '../exec.js'\nimport type { ResolverFn } from '../resolve.js'\n\nexport const linuxHWID: ResolverFn = async () => {\n  const { stdout } = await exec(\n    'cat /var/lib/dbus/machine-id /etc/machine-id 2> /dev/null || true',\n  )\n\n  const array = stdout.trim().split('\\n')\n  const first = array[0]\n  if (!first) throw new Error('failed to find hwid')\n\n  return first\n}\n","import { promisify } from 'node:util'\nimport Registry from 'winreg'\nimport type { ResolverFn } from '../resolve.js'\n\nexport const win32HWID: ResolverFn = async () => {\n  const regKey = new Registry({\n    hive: Registry.HKLM,\n    key: '\\\\SOFTWARE\\\\Microsoft\\\\Cryptography',\n  })\n\n  const getKey = promisify(regKey.get.bind(regKey))\n  const key = await getKey('MachineGuid')\n\n  return key.value.toLowerCase()\n}\n","import { resolveID } from './resolve.js'\n\nexport const getHWID = async () => {\n  const hwid = await resolveID()\n  if (hwid === '') throw new Error('failed to find hwid')\n\n  return hwid\n}\n"],"mappings":";;;;AAAA,SAAS,gBAAgB;;;ACAzB,SAAS,QAAQ,aAAa;AAC9B,SAAS,iBAAiB;AAEnB,IAAM,OAAO,UAAU,KAAK;;;ACA5B,IAAM,aAAyB,mCAAY;AAChD,QAAM,EAAE,OAAO,IAAI,MAAM,KAAK,sCAAsC;AACpE,QAAM,OAAO,OACV,KAAK,EACL,MAAM,IAAI,EACV,KAAK,UAAQ,KAAK,SAAS,gBAAgB,CAAC,GAC3C,WAAW,aAAa,EAAE,EAC3B,WAAW,kBAAkB,EAAE;AAElC,MAAI,CAAC;AAAM,UAAM,IAAI,MAAM,qBAAqB;AAChD,SAAO;AACT,GAXsC;;;ACA/B,IAAM,YAAwB,mCAAY;AAC/C,QAAM,EAAE,OAAO,IAAI,MAAM;AAAA,IACvB;AAAA,EACF;AAEA,QAAM,QAAQ,OAAO,KAAK,EAAE,MAAM,IAAI;AACtC,QAAM,QAAQ,MAAM,CAAC;AACrB,MAAI,CAAC;AAAO,UAAM,IAAI,MAAM,qBAAqB;AAEjD,SAAO;AACT,GAVqC;;;ACHrC,SAAS,aAAAA,kBAAiB;AAC1B,OAAO,cAAc;AAGd,IAAM,YAAwB,mCAAY;AAC/C,QAAM,SAAS,IAAI,SAAS;AAAA,IAC1B,MAAM,SAAS;AAAA,IACf,KAAK;AAAA,EACP,CAAC;AAED,QAAM,SAASC,WAAU,OAAO,IAAI,KAAK,MAAM,CAAC;AAChD,QAAM,MAAM,MAAM,OAAO,aAAa;AAEtC,SAAO,IAAI,MAAM,YAAY;AAC/B,GAVqC;;;AJG9B,IAAM,YAAwB,mCAAY;AAC/C,UAAQ,UAAU;AAAA,IAChB,KAAK;AACH,aAAO,UAAU;AAAA,IAEnB,KAAK;AACH,aAAO,WAAW;AAAA,IAEpB,KAAK;AACH,aAAO,UAAU;AAAA,IAEnB;AACE,YAAM,IAAI,MAAM,sBAAsB;AAAA,EAC1C;AACF,GAdqC;;;AKL9B,IAAM,UAAU,mCAAY;AACjC,QAAM,OAAO,MAAM,UAAU;AAC7B,MAAI,SAAS;AAAI,UAAM,IAAI,MAAM,qBAAqB;AAEtD,SAAO;AACT,GALuB;","names":["promisify","promisify"]}