var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// src/resolve.ts
import { platform } from "node:process";

// src/exec.ts
import { exec as _exec } from "node:child_process";
import { promisify } from "node:util";
var exec = promisify(_exec);

// src/platforms/darwin.ts
var darwinHWID = /* @__PURE__ */ __name(async () => {
  const { stdout } = await exec("ioreg -rd1 -c IOPlatformExpertDevice");
  const uuid = stdout.trim().split("\n").find((line) => line.includes("IOPlatformUUID"))?.replaceAll(/=|\s+|"/gi, "").replaceAll("IOPlatformUUID", "");
  if (!uuid)
    throw new Error("failed to find hwid");
  return uuid;
}, "darwinHWID");

// src/platforms/linux.ts
var linuxHWID = /* @__PURE__ */ __name(async () => {
  const { stdout } = await exec(
    "cat /var/lib/dbus/machine-id /etc/machine-id 2> /dev/null || true"
  );
  const array = stdout.trim().split("\n");
  const first = array[0];
  if (!first)
    throw new Error("failed to find hwid");
  return first;
}, "linuxHWID");

// src/platforms/win32.ts
import { promisify as promisify2 } from "node:util";
import Registry from "winreg";
var win32HWID = /* @__PURE__ */ __name(async () => {
  const regKey = new Registry({
    hive: Registry.HKLM,
    key: "\\SOFTWARE\\Microsoft\\Cryptography"
  });
  const getKey = promisify2(regKey.get.bind(regKey));
  const key = await getKey("MachineGuid");
  return key.value.toLowerCase();
}, "win32HWID");

// src/resolve.ts
var resolveID = /* @__PURE__ */ __name(async () => {
  switch (platform) {
    case "win32":
      return win32HWID();
    case "darwin":
      return darwinHWID();
    case "linux":
      return linuxHWID();
    default:
      throw new Error("unsupported platform");
  }
}, "resolveID");

// src/index.ts
var getHWID = /* @__PURE__ */ __name(async () => {
  const hwid = await resolveID();
  if (hwid === "")
    throw new Error("failed to find hwid");
  return hwid;
}, "getHWID");
export {
  getHWID
};
//# sourceMappingURL=index.js.map